# Execution begins at address 0 
	.pos 0 
	irmovq stack, %rsp  # Set up stack pointer  
	call main			# Execute main program
	halt				# Terminate program 

# Sample linked list
	.align 8
ele1:
	.quad 0x00a
	.quad ele2
ele2:
	.quad 0x0b0
	.quad ele3
ele3:
	.quad 0xc00
	.quad 0

main:
	irmovq ele1, %rdi
	call sum_list		# sum_list(ele1)
	ret

/* $begin sum-ys */
# long sum_list(list_ptr ls)
# ls in %rdi
sum_list:
	pushq %rbx			# Save callee-saved register
	xorq %rax, %rax		# val = 0
	jmp test
loop:
	mrmovq (%rdi), %rbx	# Get ls->val
	addq %rbx, %rax		# Add to val
	iaddq $8, %rdi		# Get ls->next
	mrmovq (%rdi), %rdi	# ls = ls->next
test:
	andq %rdi, %rdi		# Set condition codes
	jne loop			# Stop when NULL
	popq %rbx			# Restore callee-saved register
	ret
/* $end sum-ys */

# The stack starts here and grows to lower addresses
	.pos 0x100		
stack:	 
