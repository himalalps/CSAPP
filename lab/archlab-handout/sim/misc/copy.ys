# Execution begins at address 0 
	.pos 0 
	irmovq stack, %rsp  # Set up stack pointer  
	call main			# Execute main program
	halt				# Terminate program 

    .align 8
# Source block
src:
    .quad 0x00a
    .quad 0x0b0
    .quad 0xc00
# Destination block
dest:
    .quad 0x111
    .quad 0x222
    .quad 0x333

main:
	irmovq src, %rdi
    irmovq dest, %rsi
    irmovq $3, %rdx
	call copy_block		# copy_block(src, dest, 3)
	ret

/* $begin copy-ys */
# long copy_block(long *src, long *dest, long len)
# src in %rdi, dest in %rsi, len in %rdx
copy_block:
    pushq %rbx          # Save callee-saved register
    xorq %rax, %rax		# result = 0
    andq %rdx, %rdx     # Set condition codes
    jle end
loop:
    mrmovq (%rdi), %rbx # Get *src
    iaddq $8, %rdi      # src++
    rmmovq %rbx, (%rsi) # *dest = val
    iaddq $8, %rsi      # dest++
    xorq %rbx, %rax     # result ^= val
    iaddq $-1, %rdx     # len--
    jg loop             # Loop when len > 0
end:
    popq %rbx           # Restore callee-saved register
    ret
/* $end copy-ys */

# The stack starts here and grows to lower addresses
	.pos 0x100		
stack:	 
